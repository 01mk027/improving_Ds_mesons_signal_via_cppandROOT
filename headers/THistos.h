  //root file to save histograms
  TString fname;
  if(MonteCarlo) { fname = "files/MonteCarlotest.root"; }
  else           { fname = "files/Datatest.root"; }
  TFile *ff = new TFile(fname,"recreate");
  //histograms for phi and Ds+- all, signal and background
  ff->mkdir("DsMass");
  ff->cd("DsMass");
  TH1F *hmdsa = new TH1F("hmdsa","hmdsa;Mass[GeV];Entries",100,1.9,2.0);
  TH1F *hmdsa09 = new TH1F("hmdsa09","hmdsa09;Mass[GeV];Entries",100,1.9,2.0);
  TH1F *hmdsa918 = new TH1F("hmdsa918","hmdsa918;Mass[GeV];Entries",100,1.9,2.0);
  TH1F *hmdsa1827 = new TH1F("hmdsa1827","hmdsa1827;Mass[GeV];Entries",100,1.9,2.0);
  TH1F *hmdsa2736 = new TH1F("hmdsa2736","hmdsa2736;Mass[GeV];Entries",100,1.9,2.0);
  TH1F *hmdsa3645 = new TH1F("hmdsa3645","hmdsa3645;Mass[GeV];Entries",100,1.9,2.0);
 
  TH1F *hmdsb = new TH1F("hmdsb","hmdsb;Mass[GeV];Entries",100,1.9,2.0);  
  TH1F *hmdsb09 = new TH1F("hmdsb09","hmdsb09;Mass[GeV];Entries",100,1.9,2.0);
  TH1F *hmdsb918 = new TH1F("hmdsb918","hmdsb918;Mass[GeV];Entries",100,1.9,2.0);
  TH1F *hmdsb1827 = new TH1F("hmdsb1827","hmdsb1827;Mass[GeV];Entries",100,1.9,2.0);
  TH1F *hmdsb2736 = new TH1F("hmdsb2736","hmdsb2736;Mass[GeV];Entries",100,1.9,2.0);
  TH1F *hmdsb3645 = new TH1F("hmdsb3645","hmdsb3645;Mass[GeV];Entries",100,1.9,2.0);
 
  TH1F *hmdss = new TH1F("hmdss","hmdss;Mass[GeV];Entries",100,1.9,2.0);
  TH1F *hmdss09 = new TH1F("hmdss09","hmdss09;Mass[GeV];Entries",100,1.9,2.0);
  TH1F *hmdss918 = new TH1F("hmdss918","hmdss918;Mass[GeV];Entries",100,1.9,2.0);
  TH1F *hmdss1827 = new TH1F("hmdss1827","hmdss1827;Mass[GeV];Entries",100,1.9,2.0);
  TH1F *hmdss2736 = new TH1F("hmdss2736","hmdss2736;Mass[GeV];Entries",100,1.9,2.0);
  TH1F *hmdss3645 = new TH1F("hmdss3645","hmdsb3645;Mass[GeV];Entries",100,1.9,2.0);

  ff->mkdir("PhiMass");
     ff->cd("PhiMass");
  TH1F *hmphia = new TH1F("hmphia","hmphia;Mass[GeV];Entries",100,1.00,1.05);
  TH1F *hmphib = new TH1F("hmphib","hmphib;Mass[GeV];Entries",100,1.00,1.05);
  TH1F *hmphis = new TH1F("hmphis","hmphis;Mass[GeV];Entries",100,1.00,1.05);
  TH1F *onlysphi = new TH1F("onlysphi","onlysphi;Mass[GeV];Entries",100,0.98,1.2);
  TH1F *onlybphi = new TH1F("onlybphi","onlybphi;Mass[GeV];Entries",100,0.98,1.2);
  TH1F *onlyaphi = new TH1F("onlyaphi","onlyaphi;Mass[GeV];Entries",100,0.98,1.2); 
  ff->mkdir("DsEstimator");
    ff->cd("DsEstimator");
  TH1F *hestdss = new TH1F("hestdss","hestdss;Estimator",100,-0.5,0.5);
  TH1F *hestdsb = new TH1F("hestdsb","hestdsb;Estimator",100,-0.5,0.5);
  ff->mkdir("DsMassEstCut");
    ff->cd("DsMassEstCut");
  TH1F *hmdsEstCuts = new TH1F("hmdsEstCuts","hmdsEstCuts;Mass",100,1.9,2.0);
  TH1F *hmdsEstCutb = new TH1F("hmdsEstCutb","hmdsEstCutb;Mass",100,1.9,2.0);
  TH1F *hmdsEstCuta = new TH1F("hmdsEstCuta","hmdsEstCuta;Mass",100,1.9,2.0);
  ff->mkdir("Energy/DsLevel");
     ff->cd("Energy/DsLevel");
  TH1F *hed09 = new TH1F("hed09","hed09;First Energy Level;Energy[GeV];Entries",100,0,9);
  TH1F *hed918 = new TH1F("hed918","hed918;Second Energy Level;Energy[GeV];Entries",100,9,18);
  TH1F *hed1827 = new TH1F("hed1827","hed1827;Third Energy Level;Energy[GeV];Entries",100,18,27);
  TH1F *hed2736 = new TH1F("hed2736","hed2736;Fourth Energy Level;Energy[GeV];Entries",100,27,36);
  TH1F *hed3645 = new TH1F("hed3645","hed3645;Fifth Energy Level;Energy[GeV];Entries",100,36,45.6);
  ff->mkdir("Variables");
    ff->cd("Variables");
     ff->mkdir("Variables/AnglePhiPi");
        ff->cd("Variables/AnglePhiPi");
  TH1F *haphipis = new TH1F("haphipis","AnglePhiPiS;AnglePhiPiS",100,0,100);
  TH1F *haphipib = new TH1F("haphipib","AnglePhiPiB;AnglePhiPiB",100,0,100);
     ff->mkdir("Variables/AngleKpKm");
        ff->cd("Variables/AngleKpKm");
  TH1F *hakpkms = new TH1F("hakpkms","AngleKpKmS;AngleKpKmS",100,0,40);
  TH1F *hakpkmb = new TH1F("hakpkmb","AngleKpKmB;AngleKpKmB",100,0,40);
     ff->mkdir("Variables/eDs");
        ff->cd("Variables/eDs");
  TH1F *hedss = new TH1F("hedss","edsS;edsS",100,0,45);
  TH1F *hedsb = new TH1F("hedsb","edsB;edsB",100,0,45); 
     ff->mkdir("Variables/sumekpkm");
        ff->cd("Variables/sumekpkm");
  TH1F *hesKpKms = new TH1F("hesKpKms","hesKpKms;hesKpKms",100,0,50);
  TH1F *hesKpKmb = new TH1F("hesKpKmb","hesKpKmb;hesKpKmb",100,0,50); 
     ff->mkdir("Variables/AnglePhiK+");
        ff->cd("Variables/AnglePhiK+");
  TH1F *haphikps = new TH1F("haphikps","AnglePhiKpS;AnglePhiKpS",100,0,15);
  TH1F *haphikpb = new TH1F("haphikpb","AnglePhiKpB;AnglePhiKpB",100,0,15);
     ff->mkdir("Variables/AnglePhiK-");
        ff->cd("Variables/AnglePhiK-");
  TH1F *haphikms = new TH1F("haphikms","AnglePhiKmS;AnglePhiKmS",100,0,15);
  TH1F *haphikmb = new TH1F("haphikmb","AnglePhiKmB;AnglePhiKmB",100,0,15);
     ff->mkdir("Variables/AnglePiK+");
        ff->cd("Variables/AnglePiK+");
  TH1F *hapikps = new TH1F("hapikps","AnglePiKpS;AnglePiKpS",100,0,120);
  TH1F *hapikpb = new TH1F("hapikpb","AnglePiKpB;AnglePiKpB",100,0,120);
     ff->mkdir("Variables/AnglePiK-");
        ff->cd("Variables/AnglePiK-");
  TH1F *hapikms = new TH1F("hapikms","AnglePiKmS;AnglePiKmS",100,0,120);
  TH1F *hapikmb = new TH1F("hapikmb","AnglePiKmB;AnglePiKmB",100,0,120);
 
  ff->mkdir("VariablesEstCut");
     ff->cd("VariablesEstCut");
     ff->mkdir("VariablesEstCut/AnglePhiPi");
        ff->cd("VariablesEstCut/AnglePhiPi");
  TH1F *haphipiEstCuts = new TH1F("haphipiEstCuts","AnglePhiPiS EstimatorCut;haphipiEstCuts",100,0,100);
  TH1F *haphipiEstCutb = new TH1F("haphipiEstCutb","AnglePhiPiB EstimatorCut;haphipiEstCutb",100,0,100);
     ff->mkdir("VariablesEstCut/AngleKpKm");
        ff->cd("VariablesEstCut/AngleKpKm");
  TH1F *hakpkmEstCuts = new TH1F("hakpkmEstCuts","AngleKpKmS EstimatorCut;hakpkmEstCuts",100,0,40);
  TH1F *hakpkmEstCutb = new TH1F("hakpkmEstCutb","AngleKpKmB EstimatorCut;hakpkmEstCutb",100,0,40);
     ff->mkdir("VariablesEstCut/eDs");
        ff->cd("VariablesEstCut/eDs");
  TH1F *hedsEstCuts = new TH1F("hedsEstCuts","Energy of Ds S EstimatorCut;hpdsEstCuts",100,0,45);
  TH1F *hedsEstCutb = new TH1F("hedsEstCutb","Energy of Ds B EstimatorCut;hpdsEstCutb",100,0,45); 
     ff->mkdir("VariablesEstCut/sumekpkm");
        ff->cd("VariablesEstCut/sumekpkm");
  TH1F *hesKpKmEstCuts = new TH1F("hesKpKms","hesKpKms;hesKpKms",100,0,50);
  TH1F *hesKpKmEstCutb = new TH1F("hesKpKmb","hesKpKmb;hesKpKmb",100,0,50);
     ff->mkdir("VariablesEstCut/AnglePhiK+");
        ff->cd("VariablesEstCut/AnglePhiK+");
  TH1F *haphikpEstCuts = new TH1F("haphikpEstCuts","AnglePhiKpEstCutS;AnglePhiKpEstCutS",100,0,15);
  TH1F *haphikpEstCutb = new TH1F("haphikpEstCutb","AnglePhiKpEstCutB;AnglePhiKpEstCutB",100,0,15);
     ff->mkdir("VariablesEstCut/AnglePhiK-");
        ff->cd("VariablesEstCut/AnglePhiK-");
  TH1F *haphikmEstCuts = new TH1F("haphikmEstCuts","AnglePhiKmEstCutS;AnglePhiKmEstCutS",100,0,15);
  TH1F *haphikmEstCutb = new TH1F("haphikmEstCutb","AnglePhiKmEstCutB;AnglePhiKmEstCutB",100,0,15);
     ff->mkdir("VariablesEstCut/AnglePiK+");
        ff->cd("VariablesEstCut/AnglePiK+");
  TH1F *hapikpEstCuts = new TH1F("hapikpEstCuts","AnglePiKpEstCutS;AnglePiKpEstCutS",100,0,120);
  TH1F *hapikpEstCutb = new TH1F("hapikpEstCutb","AnglePiKpB;AnglePiKpB",100,0,120);
     ff->mkdir("VariablesEstCut/AnglePiK-");
        ff->cd("VariablesEstCut/AnglePiK-");
  TH1F *hapikmEstCuts = new TH1F("hapikmEstCuts","AnglePiKmEstCutS;AnglePiKmEstCutS",100,0,120);
  TH1F *hapikmEstCutb = new TH1F("hapikmEstCutb","AnglePiKmEstCutB;AnglePiKmEstCutB",100,0,120);
  ff->mkdir("D0");
     ff->cd("D0");
  ff->mkdir("D0/K+");
     ff->cd("D0/K+");
  TH1F *hd0kpa = new TH1F("hd0kpa","hd0kpa;Distance[cm];Entries",100,-5,5);
  ff->mkdir("D0/K-");
     ff->cd("D0/K-");
  TH1F *hd0kma = new TH1F("hd0kma","hd0kma;Distance[cm];Entries",100,-5,5);
  ff->mkdir("D0/Pion");
     ff->cd("D0/Pion");
  TH1F *hd0pia = new TH1F("hd0pia","hd0pia;Distance[cm];Entries",100,-5,5);
  ff->mkdir("D0/D0All");
     ff->cd("D0/D0All");
  TH1F *hd0akp = new TH1F("hd0akp","hd0akp;Distance[cm];Entries",100,-5,5);
  TH1F *hd0akm = new TH1F("hd0akm","hd0akm;Distance[cm];Entries",100,-5,5);
  TH1F *hd0api = new TH1F("hd0api","hd0api;Distance[cm];Entries",100,-5,5);
  TH1F *hd0a   = new TH1F("hd0a","hd0a;Distance[cm];Entries",200,-5,5);
  TH1F *hd0s   = new TH1F("hd0s","hd0s;Distance[cm];Entries",200,-5,5);
  TH1F *hd0s2   = new TH1F("hd0s2","hd0s2;Distance[cm];Entries",200,-5,5);
  ff->mkdir("Z0");
     ff->cd("Z0");
  ff->mkdir("Z0/K+");
     ff->cd("Z0/K+");
  TH1F *hz0kpa = new TH1F("hz0kpa","hz0kpa;Distance[cm];Entries",100,-3,3);
  ff->mkdir("Z0/K-");
     ff->cd("Z0/K-");
  TH1F *hz0kma = new TH1F("hz0kma","hz0kma;Distance[cm];Entries",100,-3,3);
  ff->mkdir("Z0/Pion");
     ff->cd("Z0/Pion");
  TH1F *hz0pia = new TH1F("hz0pia","hz0pia;Distance[cm];Entries",100,-3,3);
  ff->mkdir("Z0/Z0All");
     ff->cd("Z0/Z0All");
  TH1F *hz0akp = new TH1F("hz0akp","hz0akp;Distance[cm];Entries",100,-3,3);
  TH1F *hz0akm = new TH1F("hz0akm","hz0akm;Distance[cm];Entries",100,-3,3);
  TH1F *hz0api = new TH1F("hz0api","hz0api;Distance[cm];Entries",100,-3,3);  
  TH1F *hz0a   = new TH1F("hz0a","hz0a;Distance[cm];Entries",200,-3,3);  
  TH1F *hz0s   = new TH1F("hz0s","hz0s;Distance[cm];Entries",200,-3,3);  
  TH1F *hz0s2   = new TH1F("hz0s2","hz0s2;Distance[cm];Entries",200,-3,3);  
  ff->mkdir("DeDx");
     ff->cd("DeDx");
  ff->mkdir("DeDx/DeDxK+");
     ff->cd("DeDx/DeDxK+");
  TH1F *hdedxkpa = new TH1F("hdedxkpa","hdedxkpa;x(dE/dX);Entries",100,-6,6);
  ff->mkdir("DeDx/DeDxK-");
     ff->cd("DeDx/DeDxK-");
  TH1F *hdedxkma = new TH1F("hdedxkma","hdedxkma;x(dE/dX);Entries",100,-6,6);
  ff->mkdir("DeDx/DeDxPi");
     ff->cd("DeDx/DeDxPi");
  TH1F *hdedxpia = new TH1F("hdedxpia","hdedxpia;x(dE/dX);Entries",100,-6,6);
  ff->mkdir("DeDx/DeDxAll");
     ff->cd("DeDx/DeDxAll");
  TH1F *hdedxa = new TH1F("hdedxa","hdedxa;x(dE/dX);Entries",100,-6,6);
  TH1F *hdedxakp = new TH1F("hdedxakp","hdedxakp;x(dE/dX);Entries",100,-6,6);
  TH1F *hdedxakm = new TH1F("hdedxakm","hdedxakm;x(dE/dX);Entries",100,-6,6);
  TH1F *hdedxapi = new TH1F("hdedxapi","hdedxapi;x(dE/dX);Entries",100,-6,6);


