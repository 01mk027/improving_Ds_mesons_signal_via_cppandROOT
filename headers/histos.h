//histograms for phi and Ds+- all, signal and background
  if(MonteCarlo)
    {myRoot = new TFile("files/MonteCarlomain.root","RECREATE");}//Original file name : MonteCarlomain.root
  else
    {myRoot = new TFile("files/Datamain.root","RECREATE");}//Original file name : Datamain.root  
  myRoot->mkdir("Mass");
     myRoot->cd("Mass");
  myRoot->mkdir("Mass/PhiMass");
     myRoot->cd("Mass/PhiMass");  
  TH1F *hmphia   = new TH1F("hmphia","hmphia;Mass [GeV];Entries",100,1.0,1.05); 
  TH1F *hmphis   = new TH1F("hmphis","hmphis;Mass [GeV];Entries",100,1.0,1.05); 
  TH1F *hmphib   = new TH1F("hmphib","hmphib;Mass [GeV];Entries",100,1.0,1.05); 
  TH1F *onlysphi = new TH1F("onlysphi","onlysphi;Mass[GeV];Entries",100,0.98,1.2);
  TH1F *onlybphi = new TH1F("onlybphi","onlybphi;Mass[GeV];Entries",100,0.98,1.2);
  TH1F *onlyaphi = new TH1F("onlyaphi","onlyaphi;Mass[GeV];Entries",100,0.98,1.2); 
  myRoot->mkdir("Mass/DsMass");
     myRoot->cd("Mass/DsMass");
  TH1F *hmdsa    = new TH1F("hmdsa","hmdsa;Mass[Gev];Entries",100,1.9,2.0);
  TH1F *hmdsa09    = new TH1F("hmdsa09","hmdsa09;Mass[Gev];Entries",100,1.9,2.0);
  TH1F *hmdsa918    = new TH1F("hmdsa918","hmdsa918;Mass[Gev];Entries",100,1.9,2.0);
  TH1F *hmdsa1827    = new TH1F("hmdsa1827","hmdsa1827;Mass[Gev];Entries",100,1.9,2.0);
  TH1F *hmdsa2736    = new TH1F("hmdsa2736","hmdsa2736;Mass[Gev];Entries",100,1.9,2.0);
  TH1F *hmdsa3645    = new TH1F("hmdsa3645","hmdsa3645;Mass[Gev];Entries",100,1.9,2.0);
  TH1F *hmdss    = new TH1F("hmdss","hmdss;Mass[Gev];Entries",100,1.9,2.0);
  TH1F *hmdss09    = new TH1F("hmdss09","hmdss09;Mass[Gev];Entries",100,1.9,2.0);
  TH1F *hmdss918    = new TH1F("hmdss918","hmdss918;Mass[Gev];Entries",100,1.9,2.0);
  TH1F *hmdss1827    = new TH1F("hmdss1827","hmdss1827;Mass[Gev];Entries",100,1.9,2.0);
  TH1F *hmdss2736    = new TH1F("hmdss2736","hmdss2736;Mass[Gev];Entries",100,1.9,2.0);
  TH1F *hmdss3645    = new TH1F("hmdss3645","hmdss3645;Mass[Gev];Entries",100,1.9,2.0);
  TH1F *hmdsb    = new TH1F("hmdsb","hmdsb;Mass[Gev];Entries",100,1.9,2.0);
  TH1F *hmdsb09    = new TH1F("hmdsb09","hmdsb09;Mass[Gev];Entries",100,1.9,2.0);
  TH1F *hmdsb918    = new TH1F("hmdsb918","hmdsb918;Mass[Gev];Entries",100,1.9,2.0);
  TH1F *hmdsb1827    = new TH1F("hmdsb1827","hmdsb1827;Mass[Gev];Entries",100,1.9,2.0);
  TH1F *hmdsb2736    = new TH1F("hmdsb2736","hmdsb2736;Mass[Gev];Entries",100,1.9,2.0);
  TH1F *hmdsb3645    = new TH1F("hmdsb3645","hmdsb3645;Mass[Gev];Entries",100,1.9,2.0);
  myRoot->mkdir("Momentum");
     myRoot->cd("Momentum");
  myRoot->mkdir("Momentum/Ds");
     myRoot->cd("Momentum/Ds");  
  TH1F *hpdsa    = new TH1F("hpdsa","hpdsa;Momentum[Gev];Entries",100,0,45);
  TH1F *hpdsb    = new TH1F("hpdsb","hpdsb;Momentum[Gev];Entries",100,0,45);
  TH1F *hpdss    = new TH1F("hpdss","hpdss;Momentum[Gev];Entries",100,0,45);
  myRoot->mkdir("Momentum/Phi");
     myRoot->cd("Momentum/Phi");  
  TH1F *hpPhis  = new TH1F("hpPhis","hpPhis;Momentum[Gev];Entries",100,0,45);
  TH1F *hpPhib  = new TH1F("hpPhib","hpPhib;Momentum[Gev];Entries",100,0,45);
  TH1F *hpPhia  = new TH1F("hpPhia","hpPhia;Momentum[Gev];Entries",100,0,45);
  myRoot->mkdir("Momentum/K+-");
     myRoot->cd("Momentum/K+-");  
  TH1F *hpkpms  = new TH1F("hpkpms","hpkpms;Momentum[Gev];Entries",100,0,45);  
  TH1F *hpkpmb  = new TH1F("hpkpmb","hpkpmb;Momentum[Gev];Entries",100,0,45);
  TH1F *hpkpma  = new TH1F("hpkpma","hpkpma;Momentum[Gev];Entries",100,0,45);
  myRoot->mkdir("Momentum/Pion");
     myRoot->cd("Momentum/Pion");  
  TH1F *hpPia   = new TH1F("hpPia","hpPia;Momentum[Gev];Entries",100,0,45);
  TH1F *hpPib   = new TH1F("hpPib","hpPib;Momentum[Gev];Entries",100,0,45);
  TH1F *hpPis   = new TH1F("hpPis","hpPis;Momentum[Gev];Entries",100,0,45);  
  myRoot->mkdir("Momentum/DiffPerSumK+-");
     myRoot->cd("Momentum/DiffPerSumK+-");
  TH1F *hpdpska = new TH1F("hpdpska","hpdpska;Momentum[GeV];Entries",100,0,1);
  TH1F *hpdpskb = new TH1F("hpdpskb","hpdpskb;Momentum[GeV];Entries",100,0,1);
  TH1F *hpdpsks = new TH1F("hpdpsks","hpdpsks;Momentum[GeV];Entries",100,0,1);
  myRoot->mkdir("Momentum/DiffPerSumPP");
     myRoot->cd("Momentum/DiffPerSumPP");
  TH1F *hpdpspa = new TH1F("hpdpspa","hpdpspa;Momentum[GeV];Entries",100,0,1);
  TH1F *hpdpspb = new TH1F("hpdpspb","hpdpspb;Momentum[GeV];Entries",100,0,1);
  TH1F *hpdpsps = new TH1F("hpdpsps","hpdpsps;Momentum[GeV];Entries",100,0,1);
  myRoot->mkdir("Angle");
     myRoot->cd("Angle");
  myRoot->mkdir("Angle/PhiPi");
     myRoot->cd("Angle/PhiPi");
  TH1F *haPhiPia = new TH1F("haPhiPia","haPhipia;Angle[Degrees];Entries",100,0,100);  
  TH1F *haPhiPib = new TH1F("haPhiPib","haPhipib;Angle[Degrees];Entries",100,0,100);
  TH1F *haPhiPis = new TH1F("haPhiPis","haPhipis;Angle[Degrees];Entries",100,0,100);
  myRoot->mkdir("Angle/K+-");
     myRoot->cd("Angle/K+-");  
  TH1F *haKpKma = new TH1F("haKpKma","haKpKma;Angle[Degrees];Entries",100,0,100);
  TH1F *haKpKmb = new TH1F("haKpKmb","haKpKmb;Angle[Degrees];Entries",100,0,100);
  TH1F *haKpKms = new TH1F("haKpKms","haKpKms;Angle[Degrees];Entries",100,0,100);
  myRoot->mkdir("Angle/PhiK+");
     myRoot->cd("Angle/PhiK+");
  TH1F *haPhiKpa = new TH1F("haPhiKpa","haPhiKpa;Angle[Degrees];Entries",100,0,100);
  TH1F *haPhiKpb = new TH1F("haPhiKpb","haPhiKpb;Angle[Degrees];Entries",100,0,100);
  TH1F *haPhiKps = new TH1F("haPhiKps","haPhiKps;Angle[Degrees];Entries",100,0,100);
  myRoot->mkdir("Angle/PhiK-");
     myRoot->cd("Angle/PhiK-");
  TH1F *haPhiKma = new TH1F("haPhiKma","haPhiKma;Angle[Degrees];Entries",100,0,100);
  TH1F *haPhiKmb = new TH1F("haPhiKmb","haPhiKmb;Angle[Degrees];Entries",100,0,100);
  TH1F *haPhiKms = new TH1F("haPhiKms","haPhiKms;Angle[Degrees];Entries",100,0,100);
  myRoot->mkdir("Angle/PiK+");
     myRoot->cd("Angle/PiK+");
  TH1F *haPiKpa = new TH1F("haPiKpa","haPiKpa;Angle[Degrees];Entries",100,0,100);
  TH1F *haPiKpb = new TH1F("haPiKpb","haPiKpb;Angle[Degrees];Entries",100,0,100);
  TH1F *haPiKps = new TH1F("haPiKps","haPiKps;Angle[Degrees];Entries",100,0,100);
  myRoot->mkdir("Angle/PiK-");
     myRoot->cd("Angle/PiK-");
  TH1F *haPiKma = new TH1F("haPiKma","haPiKma;Angle[Degrees];Entries",100,0,100);
  TH1F *haPiKmb = new TH1F("haPiKmb","haPiKmb;Angle[Degrees];Entries",100,0,100);
  TH1F *haPiKms = new TH1F("haPiKms","haPiKms;Angle[Degrees];Entries",100,0,100);

  myRoot->mkdir("Energy");
     myRoot->cd("Energy");  
  myRoot->mkdir("Energy/DiffK+-");
     myRoot->cd("Energy/DiffK+-");  
  TH1F *hedKpKma = new TH1F("hedKpKma","hedKpKma;Difference in energy;Energy[Gev];Entries",100,0,45);
  TH1F *hedKpKmb = new TH1F("hedKpKmb","hedKpKmb;Difference in energy;Energy[Gev];Entries",100,0,45);
  TH1F *hedKpKms = new TH1F("hedKpKms","hedKpKms;Difference in energy;Energy[Gev];Entries",100,0,45);
  myRoot->mkdir("Energy/SumK+-");
     myRoot->cd("Energy/SumK+-");    
  TH1F *hesKpKma = new TH1F("hesKpKma","hesKpKma;Difference in energy;Energy[Gev];Entries",100,0,92);
  TH1F *hesKpKmb = new TH1F("hesKpKmb","hesKpKmb;Difference in energy;Energy[Gev];Entries",100,0,92);
  TH1F *hesKpKms = new TH1F("hesKpKms","hesKpKms;Sum in energy;Energy[Gev];Entries",100,0,92);
  myRoot->mkdir("Energy/DiffPerSumK+-");
     myRoot->cd("Energy/DiffPerSumK+-");  
  TH1F *hedpsKpKma = new TH1F("hedpsKpKma","hedKpKma;Difference in energy;Energy[Gev];Entries",100,0,1);
  TH1F *hedpsKpKmb = new TH1F("hedpsKpKmb","hedKpKmb;Difference in energy;Energy[Gev];Entries",100,0,1);
  TH1F *hedpsKpKms = new TH1F("hedpsKpKms","hedKpKms;Difference per sum;Energy[Gev];Entries",100,0,1);
  myRoot->mkdir("Energy/K+-");
     myRoot->cd("Energy/K+-");  
  TH1F *heKpKma = new TH1F("heKpKma","heKpKma;Energy of Kp and Km;Energy[Gev];Entries",100,0,45.6);
  TH1F *heKpKmb = new TH1F("heKpKmb","hesKpKmb;Energy of Kp and Km;Energy[Gev];Entries",100,0,45.6);
  TH1F *heKpKms = new TH1F("heKpKms","heKpKms;Energy of Kp and Km;Energy[Gev];Entries",100,0,45.6);
  myRoot->mkdir("Energy/Pion");
     myRoot->cd("Energy/Pion");  
  TH1F *hepiona = new TH1F("hepiona","hepiona;Energy[Gev];Energy of Pion;Entries",100,0,45.6);
  TH1F *hepions = new TH1F("hepions","hepions;Energy of Pion;Energy[Gev];Entries",100,0,45.6);
  TH1F *hepionb = new TH1F("hepionb","hepionb;Energy of Pion;Energy[Gev];Entries",100,0,45.6);
  myRoot->mkdir("Energy/Phi");
     myRoot->cd("Energy/Phi");    
  TH1F *hephia = new TH1F("hephia","hephia;Energy of Phi;Energy[Gev];Entries",100,0,45.6);
  TH1F *hephib = new TH1F("hephib","hephib;Energy of Phi;Energy[Gev];Entries",100,0,45.6);
  TH1F *hephis = new TH1F("hephis","hephis;Energy of Phi;Energy[Gev];Entries",100,0,45.6);
  myRoot->mkdir("Energy/Ds");
     myRoot->cd("Energy/Ds");    
  TH1F *hedsa  = new TH1F("hedsa","hedsa;Energy of Ds;Energy[Gev];Entries",100,0,45.6);
  TH1F *hedss  = new TH1F("hedss","hedss;Energy of Ds;Energy[Gev];Entries",100,0,45.6);
  TH1F *hedsb  = new TH1F("hedsb","hedsb;Energy of Ds;Energy[Gev];Entries",100,0,45.6);
  myRoot->mkdir("Energy/DsLevel");
     myRoot->cd("Energy/DsLevel");
  TH1F *hed09 = new TH1F("hed09","hed09;First Energy Level;Energy[GeV];Entries",100,0,9);
  TH1F *hed918 = new TH1F("hed918","hed918;Second Energy Level;Energy[GeV];Entries",100,9,18);
  TH1F *hed1827 = new TH1F("hed1827","hed1827;Third Energy Level;Energy[GeV];Entries",100,18,27);
  TH1F *hed2736 = new TH1F("hed2736","hed2736;Fourth Energy Level;Energy[GeV];Entries",100,27,36);
  TH1F *hed3645 = new TH1F("hed3645","hed3645;Fifth Energy Level;Energy[GeV];Entries",100,36,45.6); 
  myRoot->mkdir("Energy/DiffPhiPi");
     myRoot->cd("Energy/DiffPhiPi");  
  TH1F *hedPhiPia = new TH1F("hedPhiPia","hedPhiPia;Difference in energy;Energy[Gev];Entries",100,0,45);
  TH1F *hedPhiPib = new TH1F("hedPhiPib","hedPhiPib;Difference in energy;Energy[Gev];Entries",100,0,45);
  TH1F *hedPhiPis = new TH1F("hedPhiPis","hedPhiPis;Difference in energy;Energy[Gev];Entries",100,0,45);
  myRoot->mkdir("Energy/DiffPerSumPhiPi");
     myRoot->cd("Energy/DiffPerSumPhiPi");    
  TH1F *hedpsPhiPia = new TH1F("hedpsPhiPia","hedpsPhiPia;Difference in energy;Energy[Gev];Entries",100,0,1);
  TH1F *hedpsPhiPib = new TH1F("hedpsPhiPib","hedpsPhiPib;Difference in energy;Energy[Gev];Entries",100,0,1);
  TH1F *hedpsPhiPis = new TH1F("hedpsPhiPis","hedpsPhiPis;Difference in energy;Energy[Gev];Entries",100,0,1);
  myRoot->mkdir("Energy/EDsPerEK+");
     myRoot->cd("Energy/EDsPerEK+");
  TH1F *hedspekpa = new TH1F("hedspekpa","hedspekpa;Energy[GeV];Entries",100,0,45);
  TH1F *hedspekpb = new TH1F("hedspekpb","hedspekpb;Energy[GeV];Entries",100,0,45);    
  TH1F *hedspekps = new TH1F("hedspekps","hedspekps;Energy[GeV];Entries",100,0,45);
  myRoot->mkdir("Energy/EDsPerEphi");
     myRoot->cd("Energy/EDsPerEphi");
  TH1F *hedspephia = new TH1F("hedspephia","hedspephia;Energy[GeV];Entries",100,0,45);
  TH1F *hedspephib = new TH1F("hedspephib","hedspephib;Energy[GeV];Entries",100,0,45);    
  TH1F *hedspephis = new TH1F("hedspephis","hedspephis;Energy[GeV];Entries",100,0,45);
  myRoot->mkdir("D0");
     myRoot->cd("D0");
  myRoot->mkdir("D0/K+");
     myRoot->cd("D0/K+");
  TH1F *hd0kpa = new TH1F("hd0kpa","hd0kpa;Distance[cm];Entries",100,-5,5);
  TH1F *hd0kpb = new TH1F("hd0kpb","hd0kpb;Distance[cm];Entries",100,-5,5);
  TH1F *hd0kps = new TH1F("hd0kps","hd0kps;Distance[cm];Entries",100,-5,5);
  myRoot->mkdir("D0/K-");
     myRoot->cd("D0/K-");
  TH1F *hd0kma = new TH1F("hd0kma","hd0kma;Distance[cm];Entries",100,-5,5);
  TH1F *hd0kmb = new TH1F("hd0kmb","hd0kmb;Distance[cm];Entries",100,-5,5);
  TH1F *hd0kms = new TH1F("hd0kms","hd0kms;Distance[cm];Entries",100,-5,5);
  myRoot->mkdir("D0/Pion");
     myRoot->cd("D0/Pion");
  TH1F *hd0pia = new TH1F("hd0pia","hd0pia;Distance[cm];Entries",100,-5,5);
  TH1F *hd0pib = new TH1F("hd0pib","hd0pib;Distance[cm];Entries",100,-5,5);
  TH1F *hd0pis = new TH1F("hd0pis","hd0pis;Distance[cm];Entries",100,-5,5);
  myRoot->mkdir("D0/D0All");
     myRoot->cd("D0/D0All");
  TH1F *hd0akp = new TH1F("hd0akp","hd0akp;Distance[cm];Entries",100,-5,5);
  TH1F *hd0akm = new TH1F("hd0akm","hd0akm;Distance[cm];Entries",100,-5,5);
  TH1F *hd0api = new TH1F("hd0api","hd0api;Distance[cm];Entries",100,-5,5);
  TH1F *hd0a   = new TH1F("hd0a","hd0a;Distance[cm];Entries",200,-5,5);
  TH1F *hd0s   = new TH1F("hd0s","hd0s;Distance[cm];Entries",200,-5,5);  
  TH1F *hd0s2   = new TH1F("hd0s2","hd0s2;Distance[cm];Entries",200,-5,5);  
  myRoot->mkdir("Z0");
     myRoot->cd("Z0");
  myRoot->mkdir("Z0/K+");
     myRoot->cd("Z0/K+");
  TH1F *hz0kpa = new TH1F("hz0kpa","hz0kpa;Distance[cm];Entries",100,-3,3);
  TH1F *hz0kpb = new TH1F("hz0kpb","hz0kpb;Distance[cm];Entries",100,-3,3);
  TH1F *hz0kps = new TH1F("hz0kps","hz0kps;Distance[cm];Entries",100,-3,3);
  myRoot->mkdir("Z0/K-");
     myRoot->cd("Z0/K-");
  TH1F *hz0kma = new TH1F("hz0kma","hz0kma;Distance[cm];Entries",100,-3,3);
  TH1F *hz0kmb = new TH1F("hz0kmb","hz0kmb;Distance[cm];Entries",100,-3,3);
  TH1F *hz0kms = new TH1F("hz0kms","hz0kms;Distance[cm];Entries",100,-3,3);
  myRoot->mkdir("Z0/Pion");
     myRoot->cd("Z0/Pion");
  TH1F *hz0pia = new TH1F("hz0pia","hz0pia;Distance[cm];Entries",100,-3,3);
  TH1F *hz0pib = new TH1F("hz0pib","hz0pib;Distance[cm];Entries",100,-3,3);
  TH1F *hz0pis = new TH1F("hz0pis","hz0pis;Distance[cm];Entries",100,-3,3);
  myRoot->mkdir("Z0/Z0All");
     myRoot->cd("Z0/Z0All");
  TH1F *hz0akp = new TH1F("hz0akp","hz0akp;Distance[cm];Entries",100,-3,3);
  TH1F *hz0akm = new TH1F("hz0akm","hz0akm;Distance[cm];Entries",100,-3,3);
  TH1F *hz0api = new TH1F("hz0api","hz0api;Distance[cm];Entries",100,-3,3);  
  TH1F *hz0a   = new TH1F("hz0a","hz0a;Distance[cm];Entries",200,-3,3);  
  TH1F *hz0s   = new TH1F("hz0s","hz0s;Distance[cm];Entries",200,-3,3);
  TH1F *hz0s2   = new TH1F("hz0s2","hz0s2;Distance[cm];Entries",200,-3,3);  
  myRoot->mkdir("DeDx");
     myRoot->cd("DeDx");
  myRoot->mkdir("DeDx/DeDxK+");
     myRoot->cd("DeDx/DeDxK+");
  TH1F *hdedxkpa = new TH1F("hdedxkpa","hdedxkpa;Distance[cm];Entries",100,-6,6);
  TH1F *hdedxkpb = new TH1F("hdedxkpb","hdedxkpb;Distance[cm];Entries",100,-6,6);
  TH1F *hdedxkps = new TH1F("hdedxkps","hdedxkps;Distance[cm];Entries",100,-6,6);
  myRoot->mkdir("DeDx/DeDxK-");
     myRoot->cd("DeDx/DeDxK-");
  TH1F *hdedxkma = new TH1F("hdedxkma","hdedxkma;Distance[cm];Entries",100,-6,6);
  TH1F *hdedxkmb = new TH1F("hdedxkmb","hdedxkmb;Distance[cm];Entries",100,-6,6);
  TH1F *hdedxkms = new TH1F("hdedxkms","hdedxkms;Distance[cm];Entries",100,-6,6);
  myRoot->mkdir("DeDx/DeDxPi");
     myRoot->cd("DeDx/DeDxPi");
  TH1F *hdedxpia = new TH1F("hdedxpia","hdedxpia;Distance[cm];Entries",100,-6,6);
  TH1F *hdedxpib = new TH1F("hdedxpib","hdedxpib;Distance[cm];Entries",100,-6,6);
  TH1F *hdedxpis = new TH1F("hdedxpis","hdedxpis;Distance[cm];Entries",100,-6,6);
  myRoot->mkdir("DeDx/DeDxAll");
     myRoot->cd("DeDx/DeDxAll");
  TH1F *hdedxa = new TH1F("hdedxa","hdedxa;x(dE/dX);Entries",100,-6,6);
  TH1F *hdedxs = new TH1F("hdedxs","hdedxs;x(dE/dX);Entries",100,-6,6);
  TH1F *hdedxakp = new TH1F("hdedxakp","hdedxakp;x(dE/dX);Entries",100,-6,6);
  TH1F *hdedxakm = new TH1F("hdedxakm","hdedxakm;x(dE/dX);Entries",100,-6,6);
  TH1F *hdedxapi = new TH1F("hdedxapi","hdedxapi;x(dE/dX);Entries",100,-5,5);
  TH1F *hdedxKall = new TH1F("hdedxKall","hdedxKall;x(dE/dX);Entries",100,-5,5);
  TH1F *hdedxKbkg = new TH1F("hdedxKbkg","hdedxKbkg;x(dE/dX);Entries",100,-6,6);
  TH1F *hdedxKsgn = new TH1F("hdedxKsgn","hdedxKsgn;x(dE/dX);Entries",100,-6,6);
